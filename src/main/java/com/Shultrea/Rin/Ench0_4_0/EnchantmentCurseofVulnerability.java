package com.Shultrea.Rin.Ench0_4_0;

import com.Shultrea.Rin.Enchantment_Base_Sector.EnchantmentBase;
import com.Shultrea.Rin.Interfaces.IEnchantmentCurse;
import com.Shultrea.Rin.Interfaces.IEnchantmentProtection;
import com.Shultrea.Rin.Main_Sector.ModConfig;

import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.enchantment.EnchantmentProtection;
import net.minecraft.enchantment.EnumEnchantmentType;
import net.minecraft.inventory.EntityEquipmentSlot;
import net.minecraft.item.ItemStack;
import net.minecraftforge.event.entity.living.LivingDamageEvent;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class EnchantmentCurseofVulnerability extends EnchantmentBase implements IEnchantmentCurse {
	public EnchantmentCurseofVulnerability()
	{
        super(Rarity.VERY_RARE, EnumEnchantmentType.ARMOR, new EntityEquipmentSlot[]{EntityEquipmentSlot.HEAD, EntityEquipmentSlot.CHEST, EntityEquipmentSlot.LEGS, EntityEquipmentSlot.FEET});
		this.setName("CurseofVulnerability");
		this.setRegistryName("CurseofVulnerability");
	}
	
	@Override
	public boolean isConfigEnabled()
	{
		return ModConfig.enabled.CurseofVulnerability;
	}
	
	@Override
	public int getMaxLevel()
    {
        return 4;
    }
	
	@Override
    public int getMinEnchantability(int par1)
    {
		return 20 + (par1 - 1) * 10;
    }
	
	@Override
	public boolean isCurse(){
		return true;
	}
	
    @Override
    public boolean canApplyAtEnchantingTable(ItemStack stack)
    {
        return stack.getItem().canApplyAtEnchantingTable(stack, this) && ModConfig.enabled.CurseofVulnerability;
    }
    
    @Override
    public boolean isAllowedOnBooks()
    {
        return false;
    }

	@Override
	public boolean isTreasureEnchantment(){
		return true;
	}
	
    @Override
    public int getMaxEnchantability(int par1)
    {
    	return this.getMinEnchantability(par1) + 30;
    }
    
    @Override
    public boolean canApplyTogether(Enchantment fTest)
    {
    	 return super.canApplyTogether(fTest) && !(fTest instanceof IEnchantmentProtection) && !(fTest instanceof EnchantmentProtection);
    }
    
    @Override
    public boolean canApply(ItemStack fTest)
    {
    	return super.canApply(fTest);
    }
    
    @SubscribeEvent(priority = EventPriority.LOW)
    public void onDamage(LivingDamageEvent e){
    	if(e.getEntityLiving() == null)
    		return;
    	
    	int level = EnchantmentHelper.getMaxEnchantmentLevel(this, e.getEntityLiving());
    	if(level > 0)
    	e.setAmount(e.getAmount() * (1 + level * 0.40f));
    }
    
}